
Features
 * Bulk execute operations from string. basicaly serialize an array of operations so that they can be applied
 * Look through IAmazonDynamoDb comments for any exception descriptions and apply (for example resource not found exception)
 * Search for ReturnValuesOnConditionCheckFailure
 * TODO https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ServiceQuotas.html
 * When building a DynamoDBEvent.DynamodbStreamRecord
    * EventVersion is not set
    * If TTL is ever set, the UserIdentity property must be set. It has comments on how
 * Object store

Tests
 * Do a giant fuzz tester of all expressions

Interface
 * Audit every public facing type/record + document
 * Audit of C# F# interop
	* + clean up CSharp code
 * full audit of dependencies and dotnet versions
 * Test ``Delete item, with pk, deletes from table and index``. Use to have a look at log indenting, which looks weird inside `applyFilters`
 * make the "you can change this setting" message more consistant
 * audit what has leaked out from the Api.Database into the client. Might need to roll some stuff back there
 * Streamsubscriber.fs: change to an F# interface. Make a separate construct for C#
 
Optimisations/refactoring
 * PrecedenceProcessor.fs: Optimize this whole file + Parser.fs they are are a hot path
 * Revisit compiler caching
 * ScanCompiler 
	* List index projections. Allocates a new array for each add (search for AttributeList)
 * Str: asContexted, indentComplex, indent methods. These seem inefficient
 * clean up of test host helpers
 * GlobalDatabaseState.fs: messy needs cleanup
 * AstCompiler
    * Recursion limit still exists: search for ExpressionCompilerRecursionlimit
    * Removed all of the todos about non cached and lazily constructructed things. There are more efficiencies to be found there but they need to be discovered with more logging
 
    